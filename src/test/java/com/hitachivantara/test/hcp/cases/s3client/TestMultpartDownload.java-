/*                                                                             
 * Copyright (C) 2019 Hitachi Vantara Inc.                                     
 *                                                                             
 * Licensed under the Apache License, Version 2.0 (the "License");           
 * you may not use this file except in compliance with the License.            
 * You may obtain a copy of the License at                                     
 *                                                                             
 *      http://www.apache.org/licenses/LICENSE-2.0                             
 *                                                                             
 * Unless required by applicable law or agreed to in writing, software         
 * distributed under the License is distributed on an "AS IS" BASIS,         
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    
 * See the License for the specific language governing permissions and         
 * limitations under the License.                                              
 */                                                                            
package com.hitachivantara.test.hcp.cases.s3client;

import java.io.File;
import java.io.IOException;
import java.util.Calendar;

import org.junit.Test;

import com.hitachivantara.common.ex.HSCException;
import com.hitachivantara.common.util.StreamUtils;
import com.hitachivantara.hcp.standard.api.event.PartialHandlingListener;
import com.hitachivantara.hcp.standard.body.impl.FileWriteHandler;
import com.hitachivantara.hcp.standard.model.HCPObject;
import com.hitachivantara.hcp.standard.model.request.impl.MultipartDownloadRequest;
import com.hitachivantara.test.hcp.TestHCPBase;

/**
 * @author sohan
 *
 */
public class TestMultpartDownload extends TestHCPBase {

	@Test
	public void testMultipartDownload() throws IOException, HSCException, InterruptedException {
		final long b = Calendar.getInstance().getTimeInMillis();
		 MultipartDownloadRequest request = new MultipartDownloadRequest(basedir + "aws-java-sdk-1.11.305.zip");
//		 MultipartDownloadRequest request = new MultipartDownloadRequest(basedir + "cosbench-master.zip");
		// MultipartDownloadRequest request = new MultipartDownloadRequest(basedir + "aws-sdk-java-master.zip");
		// MultipartDownloadRequest request = new MultipartDownloadRequest(bigKey1);
//		MultipartDownloadRequest request = new MultipartDownloadRequest(basedir + "test.txt");//.withMinimumObjectSize(100);// bigKey1);

		 request.withMinimumObjectSize(1024*1024*100);
		 
		request.withParts(8).withWaitForComplete(true);

		FileWriteHandler handler = new FileWriteHandler(new File(LOCAL_TMP_PATH + "big.zip"));
		handler.setOverrideLocalFile(true);
		handler.setVerifyContent(true);

		handler.setListener(new PartialHandlingListener() {
			double size = 0;

			public void catchException(HSCException e) {
				e.printStackTrace();
			}

			public void completed() {
				long e = Calendar.getInstance().getTimeInMillis();
				double time = e - b;

				double mbs = (size / 1024 / 1024) / (time / 1000);
				console.println("completed speed=" + mbs + "MB/s " + mbs * 8 + "Mbps/s");
			}

			public void partCompleted(int partNumber, long beginOffset, long length) {
				size += length;
				console.println("partCompleted= " + partNumber + " " + beginOffset + " " + ((double) length) / 1024 / 1024);
			}

			public void outProgress(int id, long seekOffset, long length) {
//				console.println("progress=" + id + " " + seekOffset + " " + length);
			}
		});

		hcpClient.getObject(request, handler);

		// Thread.sleep(1000000);
	}

	@Test
	public void testGetBigData() throws IOException, HSCException {
		final long b = Calendar.getInstance().getTimeInMillis();
		HCPObject big = hcpClient.getObject(bigKey1);
		// HCPObject big = hcpClient.getObject(basedir + "aws-sdk-java-master.zip");
		StreamUtils.inputStreamToFile(big.getContent(), LOCAL_TMP_PATH + "big.zip", true);

		long e = Calendar.getInstance().getTimeInMillis();
		double time = e - b;

		double mbs = (((double) big.getSize()) / 1024 / 1024) / (time / 1000);
		console.println("completed speed=" + mbs + "MB/s " + mbs * 8 + "Mbps/s");

	}

}